<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-01-31T07:15:07+05:30</updated><id>http://localhost:4000/</id><title type="html">HELLO WORLD!</title><author><name>Pushkal Katara</name></author><entry><title type="html">Proportional-Integral-Derivative Controller</title><link href="http://localhost:4000/control%20systems/2018/01/21/Proportional-Integral-Derivative-Controller/" rel="alternate" type="text/html" title="Proportional-Integral-Derivative Controller" /><published>2018-01-21T04:59:08+05:30</published><updated>2018-01-21T04:59:08+05:30</updated><id>http://localhost:4000/control%20systems/2018/01/21/Proportional-Integral-Derivative-Controller</id><content type="html" xml:base="http://localhost:4000/control%20systems/2018/01/21/Proportional-Integral-Derivative-Controller/">&lt;p&gt;Proportional-Integral-Derivative is a control loop feedback mechanism used in industrial control systems. I implemented it in Autonomous Underwater Vehicle, here’s my intutition -&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;proportional-term&quot;&gt;Proportional Term:&lt;/h2&gt;

&lt;p&gt;Mr. Proportional : He looks at where the output is and compares to what you asked for. Hence it says:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;There is large error : Take Big Action&lt;/li&gt;
  &lt;li&gt;There is small error : Take Small Action&lt;/li&gt;
  &lt;li&gt;You have is what you asked for : Take No Action&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So basically what is this error?&lt;br /&gt;
Take a scenario of depth controller in an AUV, Pressure sensor returns the measured pressure value which is the value you have and now you want to reach a particular pressure value say from 520 to 530. So you’ll probablly have to initiate depth thrusters. The change in PWM of thruster servos must be controlled through a controller, here’s where the controller part comes in to reduce the error form 10 to 0.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pError = Setpoint - SensorValue;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;P&lt;sub&gt;out&lt;/sub&gt; = K&lt;sub&gt;p&lt;/sub&gt; * pError
K&lt;sub&gt;p&lt;/sub&gt; - Proportional Gain Constant.&lt;br /&gt;
Issue with P: Steady State Error.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;integral-term&quot;&gt;Integral Term:&lt;/h2&gt;

&lt;p&gt;Mr. Integral : He looks at the same error value, but compares it to how long its been that way and states:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You have a chronic/acute error (Small errors for long time/ Big error or small time) - Take Big Action&lt;/li&gt;
  &lt;li&gt;You have mild error (Small error for short time) - Take Small Action&lt;/li&gt;
  &lt;li&gt;Your error history is neutral - Take No Action&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What is the use of Integral term?&lt;br /&gt;
Actually when ‘P’ mode alone is used, we would face the offset (+ve or -ve deviation from setpoint) problem.
Consider the case of heading controller in an AUV, Inertial Measurment Sensor would provide the heading angles, now say a setpoint to turn 30 degree, Proportional would take action generating an offset, making the vehicle oscillate around +ive and  -ive directions of setpoint. In order to nullify steady state error, ‘I’ mode is introduced, Integral action would add up all the error with respect to time and it will track the system to its setpoint.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iError = iError + pError * dt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I&lt;sub&gt;out&lt;/sub&gt; = K&lt;sub&gt;i&lt;/sub&gt; * &lt;script type=&quot;math/tex&quot;&gt;\int_0^t pError(t) \,dt&lt;/script&gt;&lt;br /&gt;
K&lt;sub&gt;i&lt;/sub&gt; = Integral Gain Constant&lt;/p&gt;

&lt;p&gt;Issue with PI: Overshooting-Integral Windup i.e When large change in setpoint occurs, Integral term accumulates a significant error during the rise, thus overshooting, making PI controller ineffective in dynamic conditions.&lt;br /&gt;
Amazing example of Integral Windup - &lt;a href=&quot;https://instrumentationtools.com/what-is-integral-wind-up/&quot;&gt;ClickMe&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;derivative-term&quot;&gt;Derivative Term:&lt;/h2&gt;

&lt;p&gt;Mr. Derivative: He also looks at the same error, but compares it to how its changing. He says:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Error is getting bigger: Take bigger action&lt;/li&gt;
  &lt;li&gt;Error is getting smaller: Take negative action&lt;/li&gt;
  &lt;li&gt;Error is not changing: Take no action&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What does Derivative Term work on?&lt;br /&gt;
While driving a car behind someone who is already at stop. As you get closer to them, not only you want to leave the accelerator, but also want to apply brake. This braking action is given by Derivative in PID Controller. It tells to slowdown more if you are getting closer to the target. Derivative control adds another dimension of complexity to control loops. It does have its benefits, but only in special cases.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dError = (pError - previousError);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;D&lt;sub&gt;out&lt;/sub&gt; = K&lt;sub&gt;d&lt;/sub&gt; * &lt;script type=&quot;math/tex&quot;&gt;\frac{d pError(t)}{dt}&lt;/script&gt;&lt;br /&gt;
K&lt;sub&gt;d&lt;/sub&gt; = Derivative Gain Constant&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Summing up the above three controllers:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ControlSignal = kp*pError + ki*iError + kd*dError;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;P&lt;sub&gt;out&lt;/sub&gt; + I&lt;sub&gt;out&lt;/sub&gt; + D&lt;sub&gt;out&lt;/sub&gt; =  K&lt;sub&gt;p&lt;/sub&gt; * pError + K&lt;sub&gt;i&lt;/sub&gt; * &lt;script type=&quot;math/tex&quot;&gt;\int_0^t pError(t) \,dt&lt;/script&gt; + K&lt;sub&gt;d&lt;/sub&gt; * &lt;script type=&quot;math/tex&quot;&gt;\frac{d pError(t)}{dt}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; PID Constant Tuning Method:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Set K&lt;sub&gt;i&lt;/sub&gt; and K&lt;sub&gt;d&lt;/sub&gt; = 0. Increase K&lt;sub&gt;p&lt;/sub&gt; until system oscillates.&lt;/li&gt;
  &lt;li&gt;Adjust K&lt;sub&gt;i&lt;/sub&gt; so oscillations stop.&lt;/li&gt;
  &lt;li&gt;Finally adjust K&lt;sub&gt;d&lt;/sub&gt; for fast response.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Pushkal Katara</name></author><category term="SRMAUV" /><category term="Control Systems" /><summary type="html">Proportional-Integral-Derivative is a control loop feedback mechanism used in industrial control systems. I implemented it in Autonomous Underwater Vehicle, here’s my intutition -</summary></entry></feed>