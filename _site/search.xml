<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title>Smach State Machines></title>
      <url>/robotics%20operating%20system/smach/2018/01/22/ROS-MissionPlanner/</url>
      <content type="text">Robotics Operating System provides SMACH package which is useful when you want a robot to execute some complex plan, where all possible states and state transitions can be described explicitly. This basically takes the hacking out of hacking together different modules to make robotics systems perform specific complex tasks with state management.


  Fast prototyping: The straightforward Python-based SMACH syntax makes it easy to quickly prototype a state machine and start running it.
  Complex state machines: SMACH allows you to design, maintain and debug large, complex hierarchical state machines.
  Introspection: SMACH gives you full introspection in your state machines, state transitions, data flow, etc.




Consider a situation of an AUV which needs to perform tasks underwater autonomously. An autonomous system completely reply on sensor data and as the sensors are noisy, there are always chances of a system to fail. Actions performed underwater by the vehicle should be considered as an state and the state transitions must be logged for further diagonosis. Also to perform specific tasks underwater, states need to be pre-arraged in a mission planner to search, attempt and preempt the task in dynamic conditions. It is basically a robust implementation of decision rules with specified conditions.

Smach Documentation:
Brief: Smach has containers which contains states with defined state outcomes. Each container and state is declared on construction with defined transition outcomes. A state might provide outcomes such as ‘succeeded’, ‘aborted’, or ‘preempted’. These outcomes would be associated with other states, thus forming a transition. Also Smach provides interface to pass data between different states using Input and Output Keys. Also, The State base class includes an interface for coordinating preempt requests between containers and contained states. Further, we can visualize the states and containers with user data using the SMACH Viewer.



I implemented smach in an Autonomous Underwater Vehcile -
Initial task of an underwater vehicle is to sink underwater i.e. go to a certain depth underwater. Using the DepthActionClient, we can feed a desired depth as a target and the DepthActionServer would try to achieve this depth. But sometimes due to external factors, an AUV may deroute not completeting the DepthGoal. As it as an autonomous system, it needs to be aware of its condition inside. Hence, a SimpleStateMachine Container comes in play. SMACH provides SimpleActionState that call directly into the actionlib interface.


  Create a StateMachine (‘sink_state’) and assign outcomes [‘sink’, ‘not-sink’]
  Create a Callback to check the output received from Actionlib and SimpleActionState to send the goal, further decide the outcome of the state as sink or not sink.


Looking into further states, the complexitiy of mission planner increases. Consider a situtation in which an AUV needs to turn at an angle 30 degrees with a depth goal of extra 10m deep. These are two parallel states which needs to be achieved using the DepthActionClient and DepthActionServer. SMACH provides Concurrent State Machines for controlling parallel states.


  Create

</content>
      <categories>
        
          <category> Robotics Operating System </category>
        
          <category> SMACH </category>
        
      </categories>
      <tags>
        
          <tag> Mission Planner </tag>
        
          <tag> SMACH </tag>
        
          <tag> SRMAUV </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title>Actionlib></title>
      <url>/robotics%20operating%20system/actionlib/2018/01/22/ROS-Actionlib/</url>
      <content type="text">Robotics Operating System provides actionlib package which is a robust implementation to perfrom tasks in a robot, I implemented Actionlib in Autonomous Underwater Vehicle’s software stack to perfrom goals under water with logging states.

Actionlib Usecase
To perform particular tasks in robots we have cases which include sending a request to a node, and also receive a reply to the request.
We can achieve this using ROS Services but in some cases if the service takes a long time to execute, the user might want the
ability to cancel the request during execution or get periodic feedback about how the request is progressing. The actionlib package provides -

  Tools to create servers that execute long-running goals that can be preempted.
  Client interface to send requests to the server.


Take an example of an underwater vehicle which needs to reach a particular depth. Say from 5m to 10m. So with the DepthServer running in ROS Environment, any client can send
depth goals to the server stating that the vehicle needs to go to a depth of 10m.





Actionlib Message:

The ActionClient and ActionServer communicate via a “ROS Action Protocol”. In order for the client and server to communicate, we need to define action specific messages.

Message Format:
# Define the goal
float32 depth_setpoint
---
# Define the result
float32 depth_final
---
# Define a feedback message
float32 depth_error



Actionlib CMake Settings
These files are placed in a package’s ./action directory, lets call it DepthAction.action and the CMakeLists.txt must be updated as
find_package(catkin REQUIRED genmsg actionlib_msgs actionlib)
add_action_files(DIRECTORY action FILES Depth.action)
generate_messages(DEPENDENCIES actionlib_msgs)


Further package.xml must be updated as
&amp;lt;build_depend&amp;gt;actionlib&amp;lt;/build_depend&amp;gt;
&amp;lt;build_depend&amp;gt;actionlib_msgs&amp;lt;/build_depend&amp;gt;
&amp;lt;run_depend&amp;gt;actionlib&amp;lt;/run_depend&amp;gt;
&amp;lt;run_depend&amp;gt;actionlib_msgs&amp;lt;/run_depend&amp;gt;



This would generate following messages:

  DepthAction.msg
  DepthActionGoal.msg
  DepthActionResult.msg
  DepthActionFeedback.msg
  DepthGoal.msg
  DepthResult.msg
  DepthFeedback.msg


These messages are then used internally by actionlib to communicate between the ActionClient and ActionServer.


ActionClient
Further we need to write ActionServer which keeps searching for ActionClients.


  ActionServer - Receives the goal from client, tracks its status, performs operation,  and return the results. It also checks if user requested preempts.
  ActionClient - Sends a goal to the ActionServer, can be used in GUIs and Mission Planners to send particular goals in manned and autonomous systems.
Here’s my implementation of DepthServer and DepthClient in Autonomous Underwater Vehicle -


Alpheus Action Server
Alpheus Action Client
</content>
      <categories>
        
          <category> Robotics Operating System </category>
        
          <category> Actionlib </category>
        
      </categories>
      <tags>
        
          <tag> Mission Planner </tag>
        
          <tag> Actionlib </tag>
        
          <tag> SRMAUV </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title>Proportional-Integral-Derivative Controller></title>
      <url>/control%20systems/2018/01/21/Proportional-Integral-Derivative-Controller/</url>
      <content type="text">Proportional-Integral-Derivative is a control loop feedback mechanism used in industrial control systems. I implemented it in Autonomous Underwater Vehicle, so here’s my intutition thorugh this post.



Proportional Term:

Mr. Proportional : He looks at where the output is and compares to what you asked for. Hence it says:

  There is large error : Take Big Action
  There is small error : Take Small Action
  You have is what you asked for : Take No Action


So basically what is this error?
Take a scenario of depth controller in an AUV, Pressure sensor returns the measured pressure value which is the value you have and now you want to reach a particular pressure value say from 520 to 530. So you’ll probablly have to initiate depth thrusters. The change in PWM of thruster servos must be controlled through a controller, here’s where the controller part comes in to reduce the error form 10 to 0.

pError = Setpoint - SensorValue;



Pout = Kp * pError
Kp - Proportional Gain Constant.
Issue with P: Steady State Error.



Integral Term:

Mr. Integral : He looks at the same error value, but compares it to how long its been that way and states:

  You have a chronic/acute error (Small errors for long time/ Big error or small time) - Take Big Action
  You have mild error (Small error for short time) - Take Small Action
  Your error history is neutral - Take No Action


What is the use of Integral term?
Actually when ‘P’ mode alone is used, we would face the offset (+ve or -ve deviation from setpoint) problem.
Consider the case of heading controller in an AUV, Inertial Measurment Sensor would provide the heading angles, now say a setpoint to turn 30 degree, Proportional would take action generating an offset, making the vehicle oscillate around +ive and  -ive directions of setpoint. In order to nullify steady state error, ‘I’ mode is introduced, Integral action would add up all the error with respect to time and it will track the system to its setpoint.
iError = iError + pError * dt;  



Iout = Ki * 
Ki = Integral Gain Constant

Issue with PI: Overshooting-Integral Windup i.e When large change in setpoint occurs, Integral term accumulates a significant error during the rise, thus overshooting, making PI controller ineffective in dynamic conditions.
Amazing example of Integral Windup - ClickMe



Derivative Term:

Mr. Derivative: He also looks at the same error, but compares it to how its changing. He says:

  Error is getting bigger: Take bigger action
  Error is getting smaller: Take negative action
  Error is not changing: Take no action


What does Derivative Term work on?
While driving a car behind someone who is already at stop. As you get closer to them, not only you want to leave the accelerator, but also want to apply brake. This braking action is given by Derivative in PID Controller. It tells to slowdown more if you are getting closer to the target. Derivative control adds another dimension of complexity to control loops. It does have its benefits, but only in special cases.
dError = (pError - previousError);



Dout = Kd * 
Kd = Derivative Gain Constant


Summing up the above three controllers:
ControlSignal = kp*pError + ki*iError + kd*dError;


Pout + Iout + Dout =  Kp * pError + Ki *  + Kd * 

Further this ControlSignal is mapped to the control device output, i.e in the case of AUVs it is the thruster’s servo PWM values or in the case of quadcopters it is PWM to the ESCs.


PID Constant Tuning:

  Set Ki and Kd = 0. Increase Kp until system oscillates.
  Adjust Ki so oscillations stop.
  Finally adjust Kd for fast response.

</content>
      <categories>
        
          <category> Control Systems </category>
        
      </categories>
      <tags>
        
          <tag> SRMAUV </tag>
        
          <tag> Control Systems </tag>
        
          <tag> Algorithms </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
